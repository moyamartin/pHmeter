
pHmeter_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f2  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066a  00000000  00000000  000008b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000240  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001160  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000375  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000051  00000000  00000000  00001519  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000156a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_adc>:
14: 1.1V 
15: GND
*/
void init_adc()
{
	ADCSRA |= (1<<ADPS2|1<<ADPS1|1<<ADPS0);		//set pre-escaler to 128 -> 125KHz ADC_clock
  80:	ea e7       	ldi	r30, 0x7A	; 122
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	87 60       	ori	r24, 0x07	; 7
  88:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADEN;							//Enables ADC
  8a:	80 81       	ld	r24, Z
  8c:	80 68       	ori	r24, 0x80	; 128
  8e:	80 83       	st	Z, r24
  90:	08 95       	ret

00000092 <adc_read>:
}

uint16_t adc_read(uint8_t channel)
{
	ADMUX = channel;
  92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= 1<<ADSC;
  96:	ea e7       	ldi	r30, 0x7A	; 122
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	80 83       	st	Z, r24
	while((ADCSRA & 1<<ADSC)){};
  a0:	80 81       	ld	r24, Z
  a2:	86 fd       	sbrc	r24, 6
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <adc_read+0xe>
	return ADCW;
  a6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  aa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  ae:	08 95       	ret

000000b0 <main>:
void init_adc();
uint16_t adc_read(uint8_t channel);

int main(void)
{
	DDRB |= 1<<DDB1;
  b0:	21 9a       	sbi	0x04, 1	; 4
	uint16_t resultado = 0;
    init_adc();
  b2:	0e 94 40 00 	call	0x80	; 0x80 <init_adc>
    while (1) 
    {
		resultado = adc_read(1);
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	0e 94 49 00 	call	0x92	; 0x92 <adc_read>
		if (resultado > 512){
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	92 40       	sbci	r25, 0x02	; 2
  c0:	10 f0       	brcs	.+4      	; 0xc6 <main+0x16>
			PORTB |= 1<<DDB1;
  c2:	29 9a       	sbi	0x05, 1	; 5
  c4:	f8 cf       	rjmp	.-16     	; 0xb6 <main+0x6>
		}
		else
		{
			PORTB &= ~(1<<DDB1);
  c6:	29 98       	cbi	0x05, 1	; 5
  c8:	f6 cf       	rjmp	.-20     	; 0xb6 <main+0x6>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
